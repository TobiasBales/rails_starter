# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/strong_versions/all/strong_versions.rbi
#
# strong_versions-0.4.5

module StrongVersions
  def self.root; end
end
class StrongVersions::Config
  def exceptions; end
  def initialize(path); end
  def on_failure; end
  def validate_on_failure; end
end
class StrongVersions::Dependency
  def any_valid?; end
  def check_pessimistic(operator); end
  def check_valid_version(version); end
  def default_lockfile; end
  def definition; end
  def errors; end
  def gemfile; end
  def gemspec; end
  def gemspec_dependency; end
  def gemspec_path; end
  def gemspec_spec; end
  def guard_needed?(operator, version); end
  def guard_versions; end
  def initialize(dependency, lockfile = nil); end
  def lockfile_version; end
  def name; end
  def parse_version(requirement); end
  def path_source?; end
  def pessimistic?(operator); end
  def redundant?(operator, version); end
  def suggested_definition(subject = nil); end
  def suggested_gemfile_definition(constraints); end
  def suggested_gemspec_definition(constraints); end
  def suggested_version; end
  def t(name); end
  def to_s; end
  def updatable?; end
  def valid?; end
  def validate_version(operator, version); end
  def versions; end
end
class StrongVersions::DependencyFinder
  def dependencies; end
  def development; end
  def gemspec_dependencies; end
  def gemspec_paths; end
  def gemspecs; end
  def runtime; end
end
class StrongVersions::Dependencies
  def gem_regex(subject, name); end
  def initialize(dependencies); end
  def raise_failure; end
  def raise_or_warn(on_failure); end
  def raise_unknown(on_failure); end
  def replace_gem_definition(subject, dependency, content); end
  def summary; end
  def unsafe_autocorrect_error; end
  def updatable_dependencies(except); end
  def update(subject, except); end
  def update_definitions(except); end
  def update_dependency(subject, dependency); end
  def validate!(options = nil); end
  def validate(options = nil); end
  def warn_failure; end
end
class StrongVersions::Error < StandardError
end
class StrongVersions::UnsafeAutoCorrectError < StrongVersions::Error
end
class StrongVersions::Terminal
  def color(string, *substitutions); end
  def example(type); end
  def failure(count, failed); end
  def format_errors(errors); end
  def gem_update(path, gem, subject); end
  def initialize(file = nil); end
  def name_and_definition(gem); end
  def output_errors(gem); end
  def puts(string = nil); end
  def success(count); end
  def suggestion(gem); end
  def suggestion_definition(gem); end
  def summary(count, failed); end
  def t(name); end
  def update_summary(updated); end
  def warn(string); end
end
class StrongVersions::GemVersion
  def <(other); end
  def <=(other); end
  def >(other); end
  def >=(other); end
  def initialize(version); end
  def missing?; end
  def normalize(version); end
  def numeric; end
  def numeric?; end
  def stable?; end
  def standard?(parts = nil); end
  def suggestion; end
  def to_s; end
  def unstable?; end
  def valid?; end
  def version_string; end
  def zero?; end
end
module StrongVersions::Regexes
  def self.gemfile(name); end
  def self.gemspec(name); end
end
